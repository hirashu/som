# -*- coding: utf-8 -*-
# 上は日本語を記載するために必要なおまじない
# 一次元のSOMだよ。プロト版として実装、次元数とか調整できたらいいよね
import numpy as np
import lib
import json

#データパスの設定
PATH_DATA_KURA = './data/kura.json'
PATH_DATA_TEAM_MATCH_RESULT = './data/チーム勝敗結果_3d.json'
PATH_DATA_TEAM_COMPOSTION = './data/チーム構成.json'
PATH_DATA_CHARACTER_FEATURE = './data/キャラクター特徴.json'

# 定数定義
COUNT = 300
#SOM用
NODE_X = 10
NODE_Y = 1

#TSOM用
NODE_KX = 30 #エラーとなる
NODE_KY = 1
NODE_LX = 30
NODE_LY = 1

# 関数化（入力データ）
#data形式はこれ（入力データは外部からインプットする）
data=np.array([[-5,-5,-5],[-3,-3,-3],[0,0,0],[3,3,3],[5,5,5]])

#学習データは　X:-1~1,Y:-1~1のものとする
data_kura=np.array([
[[-1,-1,-1], [-0.75,-1,-0.5625], [-0.5,-1,-0.25], [-0.25,-1,-0.0625], [0,-1,0], [0.25,-1,-0.0625], [0.5,-1,-0.25], [0.75,-1,-0.5625], [1,-1,-1]],
[[-1,-0.75,-0.5625], [-0.75,-0.75,-0.125], [-0.5,-0.75,0.1875], [-0.25,-0.75,0.375], [0,-0.75,0.4375], [0.25,-0.75,0.375], [0.5,-0.75,0.1875], [0.75,-0.75,-0.125], [1,-0.75,-0.5625]],
[[-1,-0.5,-0.25], [-0.75,-0.5,0.1875], [-0.5,-0.5,0.5], [-0.25,-0.5,0.6875], [0,-0.5,0.75], [0.25,-0.5,0.6875], [0.5,-0.5,0.5], [0.75,-0.5,0.1875], [1,-0.5,-0.25]],
[[-1,-0.25,-0.0625], [-0.75,-0.25,0.375], [-0.5,-0.25,0.6875], [-0.25,-0.25,0.875], [0,-0.25,0.9375], [0.25,-0.25,0.875], [0.5,-0.25,0.6875], [0.75,-0.25,0.375], [1,-0.25,-0.0625]],
[[-1,0,0], [-0.75,0,0.4375], [-0.5,0,0.75], [-0.25,0,0.9375], [0,0,1], [0.25,0,0.9375], [0.5,0,0.75], [0.75,0,0.4375], [1,0,0]],
[[-1,0.25,-0.0625], [-0.75,0.25,0.375], [-0.5,0.25,0.6875], [-0.25,0.25,0.875], [0,0.25,0.9375], [0.25,0.25,0.875], [0.5,0.25,0.6875], [0.75,0.25,0.375], [1,0.25,-0.0625]],
[[-1,0.5,-0.25], [-0.75,0.5,0.1875], [-0.5,0.5,0.5], [-0.25,0.5,0.6875], [0,0.5,0.75], [0.25,0.5,0.6875], [0.5,0.5,0.5], [0.75,0.5,0.1875], [1,0.5,-0.25]],
[[-1,0.75,-0.5625], [-0.75,0.75,-0.125], [-0.5,0.75,0.1875], [-0.25,0.75,0.375], [0,0.75,0.4375], [0.25,0.75,0.375], [0.5,0.75,0.1875], [0.75,0.75,-0.125], [1,0.75,-0.5625]],
[[-1,1,-1], [-0.75,1,-0.5625], [-0.5,1,-0.25], [-0.25,1,-0.0625], [0,1,0], [0.25,1,-0.0625], [0.5,1,-0.25], [0.75,1,-0.5625], [1,1,-1]]
])

data_kura_missing=np.array([
[[-1,-1,-1], [-0.75,-1,-0.5625], [0,0,0], [-0.25,-1,-0.0625], [0,-1,0], [0.25,-1,-0.0625], [0.5,-1,-0.25], [0.75,-1,-0.5625], [1,-1,-1]],
[[-1,-0.75,-0.5625], [-0.75,-0.75,-0.125], [-0.5,-0.75,0.1875], [-0.25,-0.75,0.375], [0,-0.75,0.4375], [0.25,-0.75,0.375], [0.5,-0.75,0.1875], [0.75,-0.75,-0.125], [1,-0.75,-0.5625]],
[[-1,-0.5,-0.25], [-0.75,-0.5,0.1875], [0,0,0], [-0.25,-0.5,0.6875], [0,-0.5,0.75], [0.25,-0.5,0.6875], [0.5,-0.5,0.5], [0.75,-0.5,0.1875], [1,-0.5,-0.25]],
[[-1,-0.25,-0.0625], [-0.75,-0.25,0.375], [-0.5,-0.25,0.6875], [-0.25,-0.25,0.875], [0,-0.25,0.9375], [0.25,-0.25,0.875], [0.5,-0.25,0.6875], [0.75,-0.25,0.375], [1,-0.25,-0.0625]],
[[-1,0,0], [-0.75,0,0.4375], [-0.5,0,0.75], [-0.25,0,0.9375], [0,0,1], [0.25,0,0.9375], [0.5,0,0.75], [0.75,0,0.4375], [1,0,0]],
[[-1,0.25,-0.0625], [-0.75,0.25,0.375], [-0.5,0.25,0.6875], [-0.25,0.25,0.875], [0,0.25,0.9375], [0.25,0.25,0.875], [0.5,0.25,0.6875], [0.75,0.25,0.375], [1,0.25,-0.0625]],
[[-1,0.5,-0.25], [-0.75,0.5,0.1875], [-0.5,0.5,0.5], [-0.25,0.5,0.6875], [0,0.5,0.75], [0.25,0.5,0.6875], [0.5,0.5,0.5], [0.75,0.5,0.1875], [1,0.5,-0.25]],
[[-1,0.75,-0.5625], [0,0,0], [-0.5,0.75,0.1875], [-0.25,0.75,0.375], [0,0.75,0.4375], [0.25,0.75,0.375], [0.5,0.75,0.1875], [0.75,0.75,-0.125], [1,0.75,-0.5625]],
[[-1,1,-1], [-0.75,1,-0.5625], [-0.5,1,-0.25], [-0.25,1,-0.0625], [0,0,0], [0.25,1,-0.0625], [0.5,1,-0.25], [0.75,1,-0.5625], [1,1,-1]]
])

data_kuraBinary=np.array([
[[1], [1], [0], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
[[1], [1], [0], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [1], [1], [1], [1], [1]],
[[1], [0], [1], [1], [1], [1], [1], [1], [1]],
[[1], [1], [1], [1], [0], [1], [1], [1], [1]]
])

dataA=np.array([[-5,-5,-5],[-3,-3,-3],
                [3,3,3],[5,5,5]])
dataB=np.array([[1,2],
                 [3,4]])


# データの読み込み
teamMatchResult_open = open(PATH_DATA_TEAM_MATCH_RESULT, 'r')
teamMatchResult = json.load(teamMatchResult_open)
print(teamMatchResult)

kura_open = open(PATH_DATA_KURA, 'r')
kura = json.load(kura_open)
print(kura)

# 読み込んだリストをArrayに変換
teamMatchResultArray = np.array(teamMatchResult)
kuraArray = np.array(kura)

tSomDirect = lib.TSom2DirectType.TSom2DirectType(NODE_KX, NODE_KY, NODE_LX, NODE_LY)
ret = tSomDirect.runTSom2(data_kura, COUNT)
print("学習結果\n"+str(ret))
print("勝者ノードK\n")
print(tSomDirect.win_nodeK)
print("勝者ノードL\n")
print(tSomDirect.win_nodeL)

tSomDirectMC = lib.TSom2MissingComplement.TSom2MissingComplement(NODE_KX, NODE_KY, NODE_LX, NODE_LY)
retMC = tSomDirectMC.runTSom2(data_kura_missing, data_kuraBinary, COUNT)
print("学習結果_retMC\n"+str(retMC))
print("勝者ノードK\n")
print(tSomDirectMC.win_nodeK)
print("勝者ノードL\n")
print(tSomDirectMC.win_nodeL)